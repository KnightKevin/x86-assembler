# 标号
作用就是代表某行的编译后的偏移地址
有两种写法

```assembler

; 第一种写法
label:  mov ax,12

; 第二种写法
label:
    mov ax,12
```

# div 除法
- 16位除以8位，被除数放在AX中，除数可以是8位寄存器或者8位的内存，余数在AH中，商在AL中
- 32位除以16位，被除数的高16位放在DX中，低16位在AX中，除数可以是16位寄存器后者16位的内存，余数在DH中，商在DL中

# movsb,movsw,cld,std 将一段内存数据转移到另外一个地方
- movsb 以字节为单位
- movsw 以字为单位
### 使用方式
1. 源数据的地址由DS:SI指定，要传送的目的地址由ES:DI提供，传送的字节数（字数）由CX提供
2. 还要设置DF（Direction Flag）方向标志位设置传送的方向，正向（低到高），反向（告到底），须要用到cld,std
3. cld将DF标志位设置成0，表示正向，反之用std
4. 要搭配rep使用 `rep movsw`,一直重复到CX为0

# loop 指令
loop 偏移地址  如果CX不为零则循环执行偏移指令的代码，一直到0为止，之后顺序执行loop下面的代码

```shell
mov cx,5

start:
	mov ax,1
	loop start
```



# inc 指令

```assembly 
inc bx ; 将bx里面的数据加一
```

